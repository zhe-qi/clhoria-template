# Docker Compose Profiles:
#   - (default)        : PostgreSQL + Redis (基础服务)
#   - services         : 基础服务 + PgBouncer (适合本地开发)
#   - app              : 所有服务 + Hono应用 (完整应用)
#   - monitoring       : 所有服务 + 监控组件 (Prometheus + Grafana)
#   - full             : 所有服务 (app + monitoring)
#
# 使用示例:
#   docker-compose up                          # PostgreSQL + Redis
#   docker-compose --profile services up      # 基础服务 + PgBouncer
#   docker-compose --profile app up           # 完整应用 (含Hono app)
#   docker-compose --profile monitoring up    # 监控服务 (推荐用于数据库连接池监控)
#   docker-compose --profile full up          # 所有服务
#
# 监控服务访问地址 (profile: monitoring 或 full):
#   - Grafana:             http://localhost:3000 (admin/admin123)
#   - Prometheus:          http://localhost:9090
#   - PgBouncer Exporter:  http://localhost:9127/metrics
#   - 应用指标:            http://localhost:9999/metrics
#
# 监控架构: PgBouncer → pgbouncer_exporter → Prometheus → Grafana

services:
  # PostgreSQL 数据库
  postgres:
    image: postgres:16-alpine
    container_name: hono-postgres
    environment:
      POSTGRES_DB: ${DB_NAME:-postgres}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --locale=C"
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init:/docker-entrypoint-initdb.d
    networks:
      - app_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # PgBouncer 连接池 (监控配置)
  pgbouncer:
    build:
      context: ./docker/pgbouncer
      dockerfile: Dockerfile
    container_name: hono-pgbouncer
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-postgres}
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-postgres}
    ports:
      - "6432:6432"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app_network
    volumes:
      - pgbouncer_logs:/var/log/pgbouncer
    healthcheck:
      test: ["CMD-SHELL", "PGPASSWORD=${DB_PASSWORD:-postgres} psql -h localhost -p 6432 -U ${DB_USER:-postgres} -d ${DB_NAME:-postgres} -c 'SELECT 1;' || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    profiles:
      - services
      - monitoring
      - full

  # PgBouncer Exporter (Prometheus 指标导出)
  pgbouncer-exporter:
    image: prometheuscommunity/pgbouncer-exporter:latest
    container_name: hono-pgbouncer-exporter
    environment:
      PGBOUNCER_EXPORTER_HOST: pgbouncer
      PGBOUNCER_EXPORTER_PORT: 6432
      PGBOUNCER_EXPORTER_USER: stats
      PGBOUNCER_EXPORTER_PASSWORD: stats123
      PGBOUNCER_EXPORTER_DATABASE: pgbouncer
    ports:
      - "9127:9127"
    depends_on:
      pgbouncer:
        condition: service_healthy
    networks:
      - app_network
    restart: unless-stopped
    profiles:
      - monitoring
      - full

  # Redis 缓存
  redis:
    image: redis:7-alpine
    container_name: hono-redis
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped

  # Hono 应用
  app:
    platform: linux/amd64
    build:
      context: .
      dockerfile: Dockerfile
      args:
        NODE_ENV: development
        PORT: 9999
    container_name: hono-app
    ports:
      - "9999:9999"
    image: hono-template
    env_file:
      - .env
    environment:
      - NODE_ENV=${NODE_ENV}
      - PORT=${PORT}
      # 数据库连接（通过 PgBouncer 连接池）
      - DATABASE_URL=${DATABASE_URL:-postgresql://postgres:postgres@pgbouncer:6432/postgres}
      - PGBOUNCER_ADMIN_URL=${PGBOUNCER_ADMIN_URL:-postgresql://pgbouncer:admin123@pgbouncer:6432/pgbouncer}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
      - LOG_LEVEL=${LOG_LEVEL}
      - CLIENT_JWT_SECRET=${CLIENT_JWT_SECRET}
      - ADMIN_JWT_SECRET=${ADMIN_JWT_SECRET}
      - IGNORE_MIGRATION_ERRORS=true
      - IGNORE_SYNC_ERRORS=true
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      pgbouncer:
        condition: service_healthy
    networks:
      - app_network
    restart: unless-stopped
    profiles:
      - app
      - full

  # Prometheus (监控指标收集)
  prometheus:
    image: prom/prometheus:latest
    container_name: hono-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=15d'
      - '--storage.tsdb.retention.size=512MB'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    networks:
      - app_network
    restart: unless-stopped
    profiles:
      - monitoring
      - full

  # Grafana (监控仪表板)
  grafana:
    image: grafana/grafana:latest
    container_name: hono-grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin123}
      GF_INSTALL_PLUGINS: grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - app_network
    restart: unless-stopped
    profiles:
      - monitoring
      - full

volumes:
  postgres_data:
    driver: local
  pgbouncer_logs:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  app_network:
    driver: bridge
