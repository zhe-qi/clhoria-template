apiVersion: apps/v1
kind: Deployment
metadata:
  name: hono-app
  namespace: hono-template
  labels:
    app: hono-app
spec:
  replicas: 2
  selector:
    matchLabels:
      app: hono-app
  template:
    metadata:
      labels:
        app: hono-app
    spec:
      containers:
        - name: hono-app
          image: hono-template:latest
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 9999
              name: http
          env:
            # 从 ConfigMap 读取配置
            - name: NODE_ENV
              valueFrom:
                configMapKeyRef:
                  name: hono-config
                  key: NODE_ENV
            - name: LOG_LEVEL
              valueFrom:
                configMapKeyRef:
                  name: hono-config
                  key: LOG_LEVEL
            - name: PORT
              valueFrom:
                configMapKeyRef:
                  name: hono-config
                  key: PORT
            - name: IGNORE_MIGRATION_ERRORS
              valueFrom:
                configMapKeyRef:
                  name: hono-config
                  key: IGNORE_MIGRATION_ERRORS
            - name: IGNORE_SYNC_ERRORS
              valueFrom:
                configMapKeyRef:
                  name: hono-config
                  key: IGNORE_SYNC_ERRORS

            # 从 Secret 读取敏感信息
            - name: CLIENT_JWT_SECRET
              valueFrom:
                secretKeyRef:
                  name: hono-secrets
                  key: CLIENT_JWT_SECRET
            - name: ADMIN_JWT_SECRET
              valueFrom:
                secretKeyRef:
                  name: hono-secrets
                  key: ADMIN_JWT_SECRET

            # 数据库连接配置
            - name: DATABASE_URL
              value: "postgresql://$(DB_USER):$(DB_PASSWORD)@$(PGBOUNCER_HOST):$(PGBOUNCER_PORT)/$(DB_NAME)"
            - name: PGBOUNCER_ADMIN_URL
              value: "postgresql://stats:$(PGBOUNCER_STATS_PASSWORD)@$(PGBOUNCER_HOST):$(PGBOUNCER_PORT)/pgbouncer"
            - name: DB_USER
              valueFrom:
                secretKeyRef:
                  name: hono-secrets
                  key: DB_USER
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: hono-secrets
                  key: DB_PASSWORD
            - name: DB_NAME
              valueFrom:
                secretKeyRef:
                  name: hono-secrets
                  key: DB_NAME
            - name: PGBOUNCER_HOST
              valueFrom:
                configMapKeyRef:
                  name: hono-config
                  key: PGBOUNCER_HOST
            - name: PGBOUNCER_PORT
              valueFrom:
                configMapKeyRef:
                  name: hono-config
                  key: PGBOUNCER_PORT
            - name: PGBOUNCER_STATS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: hono-secrets
                  key: PGBOUNCER_STATS_PASSWORD

            # Redis 连接配置
            - name: REDIS_URL
              value: "redis://$(REDIS_HOST):$(REDIS_PORT)"
            - name: REDIS_HOST
              valueFrom:
                configMapKeyRef:
                  name: hono-config
                  key: REDIS_HOST
            - name: REDIS_PORT
              valueFrom:
                configMapKeyRef:
                  name: hono-config
                  key: REDIS_PORT

          resources:
            requests:
              cpu: 200m
              memory: 512Mi
            limits:
              cpu: 1000m
              memory: 1Gi

          # 健康检查
          livenessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 60
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
            successThreshold: 1

          readinessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 30
            periodSeconds: 5
            timeoutSeconds: 5
            failureThreshold: 3
            successThreshold: 1

          # 启动探针，给应用足够时间启动
          startupProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 12 # 2分钟启动时间

      # 等待依赖服务启动
      initContainers:
        - name: wait-for-dependencies
          image: busybox:1.36
          command: [sh, -c]
          args:
            - |
              echo "等待 PostgreSQL 和 Redis 服务启动..."

              # 等待 PostgreSQL (通过 PgBouncer)
              until nc -z pgbouncer-service 6432; do
                echo "等待 PgBouncer..."
                sleep 2
              done

              # 等待 Redis
              until nc -z redis-service 6379; do
                echo "等待 Redis..."
                sleep 2
              done

              echo "所有依赖服务已就绪"
---
apiVersion: v1
kind: Service
metadata:
  name: hono-app-service
  namespace: hono-template
  labels:
    app: hono-app
spec:
  selector:
    app: hono-app
  ports:
    - port: 80
      targetPort: 9999
      protocol: TCP
      name: http
  type: ClusterIP
---
# 用于监控的 Service (暴露 metrics 端口)
apiVersion: v1
kind: Service
metadata:
  name: hono-app-metrics
  namespace: hono-template
  labels:
    app: hono-app
    service: metrics
spec:
  selector:
    app: hono-app
  ports:
    - port: 9999
      targetPort: 9999
      protocol: TCP
      name: metrics
  type: ClusterIP
